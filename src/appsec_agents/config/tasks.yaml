run_static_analysis_task:
  description: >
    Scan the repository at {local_path} and conduct an in-depth analysis to identify potential security vulnerabilities across
    the specified systems, applications, or infrastructure. Focus on emerging threats and vulnerabilities
    as of 2024.
  expected_output: >
    A list of all the security vulnerabilities present in the repo, each with a brief description, the affected systems, and the 
    potential risks associated with them. A JSON object with 'files' (list) and 'commit_message' (string) fields, each object in 'files' should 
    have the following fields 'filepath' (str), filename (str), issue (str) and how_to_fix (str). The fixes provided in 'how_to_fix' for each file should be
    a fix that can be done within the same file without creating another file. If a single file has multiple issues, combine them. Each file should
    only appear once in the files list.
    The 'commit_message' message field should contain a 1-2 line commit message summarizing the changes that will be made to fix the issues found.
  agent: static_analyzer

fix_static_code:
  description: >
    Given a list of files to be fixed, iterate over each file and fix it.
  expected_output: >
    A brief report of all the fixes that were made and why they were necessary
  agent: remediation_engineer

commit_changes:
  description: >
    Look at all the changes made using git diff, stage all the files and commit the code to a git repo at {local_path}.
    The commit message should be a 1-2 line messages detailing the changes made.
  expected_output: >
    The commit message
  agent: git_manager

scan_dependencies_task:
  description: >
    Analyze a given security incident to identify the root cause, affected systems, and extent of impact.
    Trace the vulnerability back to its source and document the findings.
  expected_output: >
    A detailed report outlining the root cause, affected components, timeline of the incident,
    and recommendations for immediate mitigation.
  agent: dependency_scanner

remediation_task:
  description: >
    Create a plan to remediate the identified vulnerabilities or fix the root cause of a given incident.
    Develop patches or configuration changes required to secure the system.
  expected_output: >
    A step-by-step remediation guide including code snippets, system configurations,
    or process updates to resolve the identified issue.
  agent: remediation_engineer

remediation_validation_task:
  description: >
    Verify that the implemented fixes or patches have resolved the identified vulnerabilities
    without introducing new issues. Test for completeness and effectiveness.
  expected_output: >
    A validation report confirming successful remediation, including test results and 
    any additional adjustments required.
  agent: remediation_engineer

clone_repository_task:
  description: >
    Clone the repo at {repo_url} to {local_path}. Ensure the repository is 
    correctly cloned with all branches and commits.
  expected_output: >
    The local path where the repository has been cloned, including all branches and commits.
  agent: repository_cloner

detect_secrets_task:
  description: >
    Scan the repository at {local_path} for any exposed secrets such as API keys, passwords, or other sensitive information.
    Use tools like Git Secrets or TruffleHog to perform the scan.
  expected_output: >
    A brief report containing the list of detected secrets, including where they were found, what type they are and how to correctly address it.
  agent: secret_detector

remediate_secrets_task:
  description: >
    Use the output from the detect_secrets_task to automatically fix the code and remediate any exposed secrets.
  depends_on: detect_secrets_task
  input: detect_secrets_task.output
  agent: secret_remediator
  model: ${MODEL}
  prompt: >
    Fix the code to remediate the exposed secrets detected in the previous task.
    Use the output from detect_secrets_task as input: {input}. Go over the input and understand the data fully.
    The input {input} contains the file path under field "Location" from where you can read contents from.
    Normalize the file path to match the current operating system:
    - On Windows, replace "/tmp" with "C:/tmp".
    - On Unix-based systems, retain "/tmp".
    Log updated/normalized file path: {input.Location}.
    Verify if the file at updated/normalized path {input.Location} exists before proceeding.
    If the file does not exist, log an error and skip to the next file.
    If the file exists, continue with the remediation process.
    Read the entire file content using FileReadTool.    
    Log content after reading: FileReadTool({input.Location}).read().   
    Fix/remediate the exposed secrets in the file content.
    Use the FileWriter tool to write the remediated code (modified content) back to the file: `FileWriter({input.Location}).write({output})`.
    Log content after modification and before writing.
    Repeat the same for all files in {input}
  expected_output: >
    Remediated code with the exposed secrets and vulnerabilites replaced with proper code.
    Original file content to be replaced with the remediated content in the FileWriter.
